---
import Card from "@/components/Card.astro";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import { SITE } from "@/config";
import { DEFAULT_LOCALE, SUPPORTED_LOCALES } from "@/i18n/config";
import { getLocaleInfo, translateFor } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import Main from "@/layouts/Main.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";
import { getPostsGroupedByLocale } from "@/utils/posts";

const redirectTo404 = () => {
  return Astro.redirect("/404");
};

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  redirectTo404();
}

export async function getStaticPaths() {
  const paths = SUPPORTED_LOCALES.flatMap(locale => {
    return {
      params: { locale: locale === DEFAULT_LOCALE ? undefined : locale },
    };
  });

  return paths;
}

const { locale = DEFAULT_LOCALE } = Astro.params;

const postsByLocale = await getPostsGroupedByLocale({
  draft: false,
  allowedLocales: SUPPORTED_LOCALES,
});

const posts = postsByLocale[locale] || [];

const t = translateFor(Astro.currentLocale);

const LOCALE = getLocaleInfo(Astro.currentLocale);

type MonthKey =
  | "1"
  | "2"
  | "3"
  | "4"
  | "5"
  | "6"
  | "7"
  | "8"
  | "9"
  | "10"
  | "11"
  | "12";
---

<Layout title={`${t("archives")} | ${t("site.title")}`}>
  <Header />
  <Main pageTitle={t("archives")} pageDesc={t("archives.desc")}>
    {
      Object.entries(
        getPostsByGroupCondition(posts, post =>
          post.data.pubDatetime.getFullYear()
        )
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => (
          <div>
            <span class="text-2xl font-bold">
              {new Date(year).toLocaleDateString(LOCALE.langTag, {
                year: "numeric",
              })}
            </span>
            <sup class="text-sm">
              {yearGroup.length.toLocaleString(LOCALE.langTag)}
            </sup>
            {Object.entries(
              getPostsByGroupCondition(
                yearGroup,
                post => post.data.pubDatetime.getMonth() + 1
              )
            )
              .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
              .map(([month, monthGroup]) => (
                <div class="flex flex-col sm:flex-row">
                  <div class="mt-6 min-w-36 text-lg sm:my-6">
                    <span class="font-bold">
                      {t(`date.month.${month as MonthKey}`)}
                    </span>
                    <sup class="text-xs">
                      {monthGroup.length.toLocaleString(LOCALE.langTag)}
                    </sup>
                  </div>
                  <ul>
                    {monthGroup
                      .sort(
                        (a, b) =>
                          Math.floor(
                            new Date(b.data.pubDatetime).getTime() / 1000
                          ) -
                          Math.floor(
                            new Date(a.data.pubDatetime).getTime() / 1000
                          )
                      )
                      .map(data => (
                        <Card {...data} />
                      ))}
                  </ul>
                </div>
              ))}
          </div>
        ))
    }
  </Main>
  <Footer />
</Layout>
